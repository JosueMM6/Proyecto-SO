package Clases;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextArea;
/**
 *
 * @author Admin
 */
public class Archivos extends javax.swing.JFrame {

    // Crear un objeto fileSystem a nivel de clase, para que sea persistente
    private FileSystem fileSystem;
    
    /**
     * Creates new form Archivos
     */
    public Archivos() {
        initComponents();
        this.setLocationRelativeTo(null);
        fileSystem = new FileSystem();
        txtComandos.requestFocus(); //Se activa de forma automatica el JTextField
        this.setResizable(false);
        Image iconoPropio = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagenes/Icono3.png"));
        this.setIconImage(iconoPropio);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtComandos = new javax.swing.JTextField();
        btoEnter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMostrar = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestor de archivos");
        setMinimumSize(new java.awt.Dimension(1300, 750));
        getContentPane().setLayout(null);

        txtComandos.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        getContentPane().add(txtComandos);
        txtComandos.setBounds(390, 660, 750, 40);

        btoEnter.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btoEnter.setText("Enter");
        btoEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoEnterActionPerformed(evt);
            }
        });
        getContentPane().add(btoEnter);
        btoEnter.setBounds(1150, 660, 120, 40);

        txtMostrar.setEditable(false);
        txtMostrar.setColumns(20);
        txtMostrar.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txtMostrar.setRows(5);
        jScrollPane1.setViewportView(txtMostrar);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(390, 10, 880, 640);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo3.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1300, 750);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Función File (representa un archivo y que te deja hacer)
    static class File implements Serializable {
        private static final long serialVersionUID = 1L;
        private String name;
        private String content;
        private boolean readable;
        private boolean writable;

        public File(String name) {
            this.name = name;
            this.content = "";
            this.readable = true;
            this.writable = true;
        }

        public String getName() {
            return name;
        }

        public String getContent() {
            return content;
        }

        public boolean isReadable() {
            return readable;
        }

        public boolean isWritable() {
            return writable;
        }

        public void setReadable(boolean readable) {
            this.readable = readable;
        }

        public void setWritable(boolean writable) {
            this.writable = writable;
        }

        /**
         * Sobrescribe el contenido del archivo si tiene permisos de escritura.
         * Si no tiene permisos, muestra un mensaje de error.
         */
        public void write(String text, JTextArea txtMostrar) {
            if (writable) {
                content = text; // Sobrescribe el contenido
            } else {
                txtMostrar.append("Error: No tienes permisos de escritura en este archivo.\n");
            }
        }

        public void chmod(String permisos, JTextArea txtMostrar) {
            if (permisos.equals("r")) {
                this.readable = true;
                this.writable = false;
            } else if (permisos.equals("w")) {
                this.readable = false;
                this.writable = true;
            } else if (permisos.equals("rw")) {
                this.readable = true;
                this.writable = true;
            } else {
                txtMostrar.append("Permisos no válidos. Use 'r', 'w' o 'rw'.\n");
                return;
            }
            txtMostrar.append("Permisos cambiados a: " + permisos + " para el archivo '" + name + "'\n");
        }

        public void cat(JTextArea txtMostrar) {
            if (this.readable) {
                txtMostrar.append(content + "\n");
            } else {
                txtMostrar.append("Error: No tienes permisos para leer este archivo.\n");
            }
        }
    }

    // Función Directory (representa un directorio y que te deja hacer)
    static class Directory implements Serializable {
        private static final long serialVersionUID = 1L;
        private String name;
        private List<Directory> subdirectories;
        private List<File> files;
        private boolean readable;
        private boolean writable;

        public Directory(String name) {
            this.name = name;
            this.subdirectories = new ArrayList<>();
            this.files = new ArrayList<>();
            this.readable = true;
            this.writable = true;
        }

        public String getName() {
            return name;
        }

        public List<Directory> getSubdirectories() {
            return subdirectories;
        }

        public List<File> getFiles() {
            return files;
        }

        public boolean isReadable() {
            return readable;
        }

        public boolean isWritable() {
            return writable;
        }

        public void setReadable(boolean readable) {
            this.readable = readable;
        }

        public void setWritable(boolean writable) {
            this.writable = writable;
        }

        public void addFile(File file) {
            files.add(file);
        }

        public void addSubdirectory(Directory directory) {
            subdirectories.add(directory);
        }

        public boolean removeFile(String fileName) {
            return files.removeIf(file -> file.getName().equals(fileName));
        }

        public boolean removeSubdirectory(String dirName) {
            return subdirectories.removeIf(dir -> dir.getName().equals(dirName));
        }

        public void listContents(JTextArea txtMostrar, boolean detailed) {
            if (files.isEmpty() && subdirectories.isEmpty()) {
                txtMostrar.append("El directorio está vacío.\n");
            } else {
                if (detailed) {
                    // Mostrar detalles de los archivos
                    for (File file : files) {
                        String tipo = "Archivo";
                        String permisos = (file.isReadable() ? "r" : "-") + (file.isWritable() ? "w" : "-");
                        txtMostrar.append("Tipo: " + tipo + " - Permisos: " + permisos + " - Nombre: " + file.getName() + "\n");
                    }

                    // Mostrar detalles de los subdirectorios
                    for (Directory subdir : subdirectories) {
                        String tipo = "Directorio";
                        String permisos = (subdir.isReadable() ? "r" : "-") + (subdir.isWritable() ? "w" : "-");
                        txtMostrar.append("Tipo: " + tipo + " - Permisos: " + permisos + " - Nombre: " + subdir.getName() + "\n");
                    }
                } else {
                    // Si no es detallado, solo se muestra el nombre de archivos y directorios
                    txtMostrar.append("Archivos:\n");
                    for (File file : files) {
                        txtMostrar.append("  " + file.getName() + "\n");
                    }
                    txtMostrar.append("Directorios:\n");
                    for (Directory subdir : subdirectories) {
                        txtMostrar.append("  " + subdir.getName() + "\n");
                    }
                }
            }
        }

        //Actualiza los permisos
        public void chmod(String permisos, JTextArea txtMostrar) {
            if (permisos.equals("r")) {
                this.readable = true;
                this.writable = false;
            } else if (permisos.equals("w")) {
                this.readable = false;
                this.writable = true;
            } else if (permisos.equals("rw")) {
                this.readable = true;
                this.writable = true;
            } else {
                txtMostrar.append("Permisos no válidos. Use 'r', 'w' o 'rw'.\n");
                return;
            }
            txtMostrar.append("Permisos cambiados a: " + permisos + " para el directorio '" + name + "'\n");
        }
        
        //Busca un archivo
        public File findFileByName(String name) {
            for (File file : files) {
                if (file.getName().equals(name)) {
                    return file;
                }
            }
            return null;
        }

        //Busca un directorio
        public Directory findSubdirectoryByName(String name) {
            for (Directory dir : subdirectories) {
                if (dir.getName().equals(name)) {
                    return dir;
                }
            }
            return null;
        }
    }

    //Función FileSystem (gestiona operaciones sobre archivos y directorios)
    public class FileSystem {
        private Directory rootDirectory;
        private Directory currentDirectory;

        public FileSystem() {
            rootDirectory = new Directory("root");
            currentDirectory = rootDirectory;
        }

        public String getCurrentPath() {
            return "/" + currentDirectory.getName();
        }

        //Crea directorios
        public void mkdir(String name, JTextArea txtMostrar) {
            // Verificar si ya existe un directorio con el mismo nombre
            if (currentDirectory.findSubdirectoryByName(name) != null) {
                txtMostrar.append("Error: Ya existe un directorio con el nombre '" + name + "'.\n");
                return;
            }

            // Si no existe, se crea el nuevo directorio
            Directory newDir = new Directory(name);
            currentDirectory.addSubdirectory(newDir);
            txtMostrar.append("Directorio '" + name + "' creado con éxito.\n");
        }

        //Crea archivos
        public void touch(String name, JTextArea txtMostrar) {
            // Verificar si ya existe un archivo o directorio con el mismo nombre
            if (currentDirectory.findFileByName(name) != null) {
                txtMostrar.append("Error: Ya existe un archivo con el nombre '" + name + "'.\n");
                return;
            }
            // Si no existe, se crea el nuevo archivo
            File newFile = new File(name);
            currentDirectory.addFile(newFile);
            txtMostrar.append("Archivo '" + name + "' creado con éxito.\n");
        }

        //Muestra los archivos y directorios
        public void ls(JTextArea txtMostrar) {
            currentDirectory.listContents(txtMostrar, false);
        }

        //Muestra los archivos y directorios a detalle
        public void lsL(JTextArea txtMostrar) {
            currentDirectory.listContents(txtMostrar, true);
        }

        //Busca el directorio y archivos para actualizar sus permisos
        public void chmod(String name, String permisos, JTextArea txtMostrar) {
            File file = currentDirectory.findFileByName(name);
            if (file != null) {
                file.chmod(permisos, txtMostrar);
                return;
            }
            Directory dir = currentDirectory.findSubdirectoryByName(name);
            if (dir != null) {
                dir.chmod(permisos, txtMostrar);
            } else {
                txtMostrar.append("Archivo o directorio no encontrado.\n");
            }
        }

        //Elimina archivos o directorios
        public void rm(String name, JTextArea txtMostrar) {
            if (!currentDirectory.removeFile(name)) {
                if (!currentDirectory.removeSubdirectory(name)) {
                    txtMostrar.append("No se encontró el archivo o directorio '" + name + "'.\n");
                } else {
                    txtMostrar.append("Directorio '" + name + "' eliminado.\n");
                }
            } else {
                txtMostrar.append("Archivo '" + name + "' eliminado.\n");
            }
        }
        
        //Sirve para moverse entre directorios
        public void cd(String name, JTextArea txtMostrar) {
            if (name.equals("..") && currentDirectory != rootDirectory) {
                currentDirectory = rootDirectory;
                txtMostrar.append("Cambiando al directorio raíz.\n");
            } else {
                Directory dir = currentDirectory.findSubdirectoryByName(name);
                if (dir != null) {
                    currentDirectory = dir;
                    txtMostrar.append("Cambiando al directorio '" + name + "'\n");
                } else {
                    txtMostrar.append("Directorio no encontrado.\n");
                }
            }
        }

        //Limpia la pantalla de comandos
        public void clear(JTextArea txtMostrar) {
            txtMostrar.setText("");
        }

        //Permite escribir dentro de un archivo
        public void writeToFile(String fileName, String content, JTextArea txtMostrar) {
            File file = currentDirectory.findFileByName(fileName);
            if (file != null) {
                file.write(content, txtMostrar);
                //txtMostrar.append("Texto escrito en el archivo: " + fileName + "\n");
            } else {
                txtMostrar.append("Error: Archivo '"+ fileName +"' no encontrado.\n");
            }
        }

        //Permite visualizar el contenido del archivo
        public void cat(String name, JTextArea txtMostrar) {
            File file = currentDirectory.findFileByName(name);
            if (file != null) {
                file.cat(txtMostrar);
            } else {
                txtMostrar.append("Archivo no encontrado: " + name + "\n");
            }
        }
    }

    
    private void btoEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoEnterActionPerformed
        String entrada = txtComandos.getText().trim(); //Se ingresan los comandos en el JTextField
        String comando = entrada.toLowerCase(); //Transforma a minusculas el comado que se desea 
        String[] parts = comando.split(" ", 3); //Solo se visualiza el comando
        String[] parts1 = entrada.split(" ", 3); //Visualiza lo que sigue del comando
        txtMostrar.append("\n"+fileSystem.getCurrentPath() + " $ " + comando + "\n"); //Se muestra que comando se esta usando

        switch (parts[0]) {
            case "mkdir": //Crea directorios
                if (parts.length > 1) {
                    fileSystem.mkdir(parts1[1], txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un nombre para el directorio.\n");
                }
                break;
            case "touch": //Crea archivos
                if (parts.length > 1) {
                    fileSystem.touch(parts1[1], txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un nombre para el archivo.\n");
                }
                break;
            case "ls": 
                if (parts.length > 1) {
                    fileSystem.lsL(txtMostrar); //Muestra los archivos y directorios a detalle
                } else {
                    fileSystem.ls(txtMostrar); //Muestra los archivos y directorios
                }
                break;
            case "chmod": //Actualiza los permisos
                if (parts.length > 2) {
                    fileSystem.chmod(parts1[1], parts[2], txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un archivo o directorio y permisos ('r', 'w', 'rw').\n");
                }
                break;
            case "rm": //Elimina archivos o directorios
                if (parts.length > 1) {
                    fileSystem.rm(parts1[1], txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un archivo o directorio.\n");
                }
                break;
            case "cd": //Se mueve entre directorios
                if (parts.length > 1) {
                    fileSystem.cd(parts1[1], txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un directorio.\n");
                }
                break;
            case "clear": //Limpia los comandos
                fileSystem.clear(txtMostrar);
                break;
            case "exit": //Se cierra la ventana de archivos y muestra la ventana principal
                txtMostrar.append("Saliendo del sistema...\n");
                Principal principal = new Principal();
                principal.setVisible(true);
                this.dispose();
                break;
            case "write": //Permite escribir dentro de un archivo
                if (parts.length > 2) {
                    String fileName = parts1[1];
                    String content = parts1[2];
                    fileSystem.writeToFile(fileName, content, txtMostrar);
                } else {
                    txtMostrar.append("Debe especificar un archivo y el texto a escribir.\n");
                }
                break;
            case "cat": //Muestra el contenido de un archivo
                if (parts.length > 1) {
                    fileSystem.cat(parts1[1], txtMostrar);
                } else {
                    txtMostrar.append("Por favor, ingresa el nombre del archivo.\n");
                }
                break;
            default: //No se reconoce algun otro comando
                txtMostrar.append("Comando no reconocido.\n");
        }
        txtComandos.setText(""); // Limpiar el campo de entrada
        txtComandos.requestFocus(); //Se activa de forma automatica el JTextField
    }//GEN-LAST:event_btoEnterActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Archivos().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btoEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtComandos;
    private javax.swing.JTextArea txtMostrar;
    // End of variables declaration//GEN-END:variables
}